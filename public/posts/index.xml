<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on ithinkso.digital</title>
		<link>https://www.ithinkso.digital/posts/</link>
		<description>Recent content in Posts on ithinkso.digital</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 02 May 2020 13:12:19 +0000</lastBuildDate>
		<atom:link href="https://www.ithinkso.digital/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Building static website using HUGO</title>
			<link>https://www.ithinkso.digital/posts/2020-building-static-website-using-hugo/</link>
			<pubDate>Sat, 02 May 2020 13:12:19 +0000</pubDate>
			
			<guid>https://www.ithinkso.digital/posts/2020-building-static-website-using-hugo/</guid>
			<description>Have you ever heard about Hugo? If not but you need to build your own website - portfolio, company page, product page or just a blog you definitely need to read this article.
 Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.
 This is what you can read on Hugo&amp;rsquo;s website. What is the most important it this tool?</description>
			<content type="html"><![CDATA[<p><img src="/images/uploads/hugo-sm-hero.jpg" alt="hero image"></p>
<p>Have you ever heard about Hugo? If not but you need to build your own website - portfolio, company page, product page or just a blog you definitely need to read this article.</p>
<p><img src="/images/uploads/hugo-logo-wide.svg" alt="Hugo logo " title="Hugo logo"></p>
<blockquote>
<p><a href="https://gohugo.io/">Hugo</a> is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.</p>
</blockquote>
<p>This is what you can read on Hugo&rsquo;s website. What is the most important it this tool? You don&rsquo;t need to have any special coding skills! Still interesting? Good! Let&rsquo;s start.</p>
<p>The easiest way to install Hugo on MacOS/ Linux is using Homebrew or Choco if you are using Windows.  To start just open your favourite terminal and call:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">brew install hugo
hugo version
</code></pre></div><p>Then Hugo will be installed. Command <code>hugo version</code>  should return your something like bellow, it means that CLI was installed successfully.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Hugo Static Site Generator v0.69.0/extended darwin/amd64 BuildDate: unknown
</code></pre></div><p>To create new site give the command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new site blog
</code></pre></div><p><br>
The above will create a new Hugo site in a folder named <code>blog</code>. Change directory to this path and run local server which is built in inside Hugo.  Server will be automatically run on port 1313 so if you open your browser and visit http://localhost:1313/ your page will be display. Now page is blank because there is no content there. You have to add theme.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo server -D
</code></pre></div><p><br>
To do it the easiest way is <a href="https://themes.gohugo.io/">visit Hugo website</a> where you can find a lot of ready to use themes. Some of them are suit for product page, portfolio or blog for which I need. I&rsquo;ve chosen theme named <a href="https://github.com/zhe/hugo-theme-slim">hugo-theme-slim</a>. When you choose one which you want to use just visit the themes Github repository and clone it to your website directory.</p>
<p><img src="/images/uploads/clone-git.gif" alt="git hub clone"></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> themes
git clone https://github.com/zhe/hugo-theme-slim slim
</code></pre></div><p>The last thing which you have to do is add theme to your site. To do it just edit the config.toml in root folder of your project. How this file will be looking depends on which theme you chosen. In general for sure you have to add a line indicating which theme will be use by Hugo. But better find in your theme folder <strong>exampleSite</strong> directory and copy all content form config.toml your own.</p>
<p>At this moment you can also change the baseURL to your domain address.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">baseURL</span> <span class="o">=</span> <span class="s2">&#34;http://example.org/&#34;</span>
<span class="nv">languageCode</span> <span class="o">=</span> <span class="s2">&#34;en-us&#34;</span>
<span class="nv">title</span> <span class="o">=</span> <span class="s2">&#34;My New Hugo Site&#34;</span>
<span class="nv">theme</span> <span class="o">=</span> <span class="s1">&#39;slim&#39;</span>

<span class="o">[</span>params<span class="o">]</span>
  <span class="nv">Subtitle</span> <span class="o">=</span> <span class="s2">&#34;Your site&#39;s subtitle/tagline&#34;</span>
  <span class="nv">GithubID</span> <span class="o">=</span> <span class="s2">&#34;Your Github ID&#34;</span>
  <span class="nv">TwitterID</span> <span class="o">=</span> <span class="s2">&#34;Your Twitter ID&#34;</span>
  <span class="nv">AnalyticsID</span> <span class="o">=</span> <span class="s2">&#34;Your Google Analytics tracking code&#34;</span>
  <span class="nv">DisqusShortname</span> <span class="o">=</span> <span class="s2">&#34;Your Disqus shortname&#34;</span>
  <span class="nv">Summary</span> <span class="o">=</span> <span class="nb">true</span>  <span class="c1"># takes true or false</span>
  <span class="nv">Content</span> <span class="o">=</span> <span class="nb">false</span>  <span class="c1"># takes true or false</span>
  <span class="c1"># if both are set to true, summary is shown.</span>
  <span class="c1"># FooterMsg = &#34;Copyright Me 2016. Powered by Hugo.&#34;</span>
  <span class="nv">mainSections</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;post&#34;</span><span class="o">]</span>
</code></pre></div><p>Quite easy, right? Ok, but it was supposed to be a blog! Yes, adding the new blog post is also so easy. Look on your config file there should be something like:</p>
<pre><code>mainSections = \[&quot;post&quot;]
</code></pre><p>It means that all your post have to be in post folder. Ok so create new folder named <strong>post</strong> under the content directory. To add new blog post just create new file like title-my-blog-post.md or what you prefered. But very important is to keep the *.md extensions. Hugo to rendering new conted is using Markdown language. It is saved in plain text format but includes inline text symbols that define how to format the text. Markdown language has very simple syntax which you want to check <a href="https://guides.github.com/features/mastering-markdown/">here</a>.</p>
<p><img src="/images/uploads/dir-tree.png" alt=""></p>
<p>Sample blog post bellow:</p>
<div class="highlight"><pre class="chroma"><code class="language-markdown" data-lang="markdown">+++
title = &#34;Blog post&#34;
date = 2020-04-21T21:36:10+02:00
draft = false
+++
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam pharetra cursus turpis, laoreet venenatis diam varius eu. 
Maecenas feugiat, est ac auctor scelerisque, dui eros ornare quam, vel vestibulum neque sapien et sapien. Cras congue, augue eu tristique ullamcorper, justo dui euismod dolor, quis faucibus eros turpis id mauris. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec dolor magna, imperdiet et lacinia id, suscipit vel velit. Aliquam luctus leo sit amet magna tempor, in aliquet dolor placerat. Donec eget aliquet purus. Donec feugiat dapibus ipsum et iaculis. Cras convallis nec elit ut porta. Vestibulum dignissim auctor tincidunt. Duis hendrerit, nibh sit amet tempor porttitor, diam felis vulputate mauris, ut tincidunt mauris nisi at magna.
</code></pre></div><p>The part between plus signs is something like setting of your entries. Bellow the settings real content of your post. Now if you save this file new post will be added to your home page Thats all.</p>
<p>If you don&rsquo;t want to publish you post immediately just change draft from false to true.</p>
<p>Build static pages<a href="https://gohugo.io/getting-started/quick-start/#step-7-build-static-pages"></a>? Just call:</p>
<pre><code>hugo -D
</code></pre><p>Output will be in<code>/public/</code>directory. All what is inside this directory just copy to your sever and voil√† your site is online.</p>
<p><img src="/images/uploads/screenshot-2020-05-02-at-21.25.11.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>How to Build Chatbot</title>
			<link>https://www.ithinkso.digital/posts/how-to-build-chatbot/</link>
			<pubDate>Tue, 21 Apr 2020 19:36:10 +0000</pubDate>
			
			<guid>https://www.ithinkso.digital/posts/how-to-build-chatbot/</guid>
			<description>What chatbots are? Chatbots are the future of software and a new way to provide services through a conversational interface like Messenger, WhatsApp, Slack, Telegram etc.
I will show you how to build your own bot and deploy it on Messenger platform in several simply steps using Python, Flask and Heroku.
Setup Facebook Developer Account Before you start coding have to create a [Facebook developer account(https://developers.facebook.com/apps/)], Facebook App, Facebook page, and set it all up.</description>
			<content type="html"><![CDATA[<p>What chatbots are? Chatbots are the future of software and a new way to provide services through a conversational interface like Messenger, WhatsApp, Slack, Telegram etc.</p>
<p><img src="/images/uploads/its-heromessenger.jpg" alt="Hero image"></p>
<p>I will show you how to build your own bot and deploy it on Messenger platform in several simply steps using <a href="https://www.python.org/">Python</a>, <a href="https://palletsprojects.com/p/flask/">Flask</a> and <a href="https://dashboard.heroku.com/">Heroku</a>.</p>
<p><img src="https://miro.medium.com/max/320/1*x7KfD6oNraVwDqbNjrRN8g.gif" alt="chatbot preview"></p>
<h2 id="setup-facebook-developer-account">Setup Facebook Developer Account</h2>
<p>Before you start coding have to create a [Facebook developer account(<a href="https://developers.facebook.com/apps/)%5D,">https://developers.facebook.com/apps/)],</a> <a href="https://developers.facebook.com/apps/">Facebook App</a>, <a href="https://www.facebook.com/pages/creation/?ref_type=pages_you_admin">Facebook page</a>, and set it all up.</p>
<p><img src="https://miro.medium.com/max/700/1*2qW4tHU6B3B07WhmJOjDYg.png" alt="Creating new App (My Apps ‚Üí Create App)"> Creating new App (My Apps ‚Üí Create App)</p>
<p><img src="https://miro.medium.com/max/540/1*NVeHT9jeWSXOyfXaUh8AAg.gif" alt="Creating new Facebook page"> Creating new Facebook page</p>
<p>When yours‚Äô new Facebook Page and App are ready you have to connect them together. To do this, open the App page, use the Set up button under the Messenger box in Dashboard tab. Add your newly created Page and allow App to manage and access conversation in Messenger. After that Edit Page Subscriptipon check <strong>messages, messaging_postback and messagingn_referrals</strong>. Then generate, copy and save secret token which will be necessary later and use button Add to Submission next to pages_messaging ‚Äî that‚Äôs will be enough for now. Let‚Äôs move on. We‚Äôll be back here when our Flask application starts working.</p>
<p><img src="https://miro.medium.com/max/600/1*5qbq86-oJqVdwVW3nYV3wA.gif" alt=""> <img src="https://miro.medium.com/max/700/1*wxOnnRFE7qCKWwYqQaDATg.png" alt="Editing page subscriptions"></p>
<h2 id="coding-time-">Coding time üïëüë®üèª‚Äçüíª</h2>
<p>I assume that you know what Flask is and you already have at least basic experience with Python. If not I‚Äôll refer you to the Python and Flask documentation. Best will be use Python 3.7 or newer version. If you still use Python 2.x you have to migrate as soon as possible.</p>
<p><img src="https://miro.medium.com/max/500/1*pnG0E4PyU43Uyw9wd54zfg.png" alt="migration 2.x to 3.x"></p>
<p>Ok, start with creating an HTTP server:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;Hello, World!&#39;</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">threaded</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre></div><p>And add your Webhook endpoint ‚Äî this is the core of your Messenger bot. By using Webhook you will receive, process, and send messages.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">credentials</span><span class="o">,</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="c1"># Adds support for GET requests to our webhook</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/webhook&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">webhook</span><span class="p">():</span>
    <span class="n">verify_token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;hub.verify_token&#34;</span><span class="p">)</span>
    <span class="c1"># Check if sent token is correct</span>
    <span class="k">if</span> <span class="n">verify_token</span> <span class="o">==</span> <span class="n">credentials</span><span class="o">.</span><span class="n">WEBHOOK_VERIFY_TOKEN</span><span class="p">:</span>
        <span class="c1"># Responds with the challenge token from the request</span>
        <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;hub.challenge&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="s1">&#39;Unable to authorise.&#39;</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">threaded</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre></div><p>Now you can run your Flask app locally and public URLs using ngrok which will allow to test the solution until deploy them on Heroku.</p>
<p>To authorize Webhook back to your Facebook Developer App Dashboard. Add Callback URL in Webhook part and provide Verify Token (the same which you set in Flask app).</p>
<p><img src="https://miro.medium.com/max/600/1*KMaLR59JZBIB_7ysrtGKYA.gif" alt="Webhook authorization"></p>
<p>Voila üëåüèª your connection between server and Messenger is ready. Now we can take care of messaging ‚úâÔ∏è. As there is in <a href="https://developers.facebook.com/docs/messenger-platform/send-messages">documentation</a>‚Ä¶</p>
<p>'&rsquo; Messages are sent by submitting a POST request to the Send API with your page access token appended to the URL query string:
<a href="https://graph.facebook.com/v5.0/me/messages?access_token=">https://graph.facebook.com/v5.0/me/messages?access_token=</a>&lt;PAGE_ACCESS_TOKEN&gt;
'&rsquo;</p>
<p>‚Ä¶ so add POST support and start receiving messages from users üì©.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Adds support for POST requests</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/webhook&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">webhook_handle</span><span class="p">():</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
    <span class="k">return</span> <span class="s1">&#39;ok&#39;</span>
</code></pre></div><p>Now if you send a message to your chatbot in console you can see how the <strong>POST</strong> request looks like:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span><span class="s1">&#39;object&#39;</span><span class="p">:</span> <span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;entry&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="s1">&#39;105114914362459&#39;</span><span class="p">,</span> <span class="s1">&#39;time&#39;</span><span class="p">:</span> <span class="mi">1579028712412</span><span class="p">,</span> <span class="s1">&#39;messaging&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;sender&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="s1">&#39;xxxxxxxx&#39;</span><span class="p">},</span> <span class="s1">&#39;recipient&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="s1">&#39;xxxxxx&#39;</span><span class="p">},</span> <span class="s1">&#39;timestamp&#39;</span><span class="p">:</span> <span class="mi">1579028712093</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;mid&#39;</span><span class="p">:</span> <span class="s1">&#39;m_ttOeT7YUN5m65ly2AwPujso38029QHO5Nx8Qvwo-XDWt5gWohDo5z4hmDh8NTiLDgOJ8CRgFV7_7JKQ4eFskTw&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="s1">&#39;Hi&#39;</span><span class="p">}}]}]}</span>
</code></pre></div><p>This is a Python dict with several keys like sender id, recipient_id or message[‚Äòtext‚Äô] that stores the message from the user. If you can know how to catch messages will be good to answer them, right? Look at the <a href="https://developers.facebook.com/docs/messenger-platform/send-messages">documentation</a> and everything will be clear üí°</p>
<pre><code>Sending Text
To send a basic text message, submit a POST request to the Send API, with message.text set in the request body:
curl -X POST -H &quot;Content-Type: application/json&quot; -d '{
&quot;recipient&quot;:{
&quot;id&quot;:&quot;&lt;PSID&gt;&quot;
},
&quot;message&quot;:{
&quot;text&quot;:&quot;hello, world!&quot;
}
}' &quot;https://graph.facebook.com/v5.0/me/messages?access_token=&lt;PAGE_ACCESS_TOKEN&gt;&quot;
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/webhook&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">webhook</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;entry&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;messaging&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;message&#39;</span><span class="p">]</span>
    <span class="n">sender_id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;entry&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;messaging&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;sender&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">message</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]:</span>
        <span class="n">request_body</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s1">&#39;recipient&#39;</span><span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">sender_id</span>
                <span class="p">},</span>
                <span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;hello, world!&#34;</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;https://graph.facebook.com/v5.0/me/messages?access_token=&#39;</span><span class="o">+</span><span class="n">credentials</span><span class="o">.</span><span class="n">TOKEN</span><span class="p">,</span><span class="n">json</span><span class="o">=</span><span class="n">request_body</span><span class="p">)</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">response</span>
    <span class="k">return</span> <span class="s1">&#39;ok&#39;</span>
</code></pre></div><p><img src="https://miro.medium.com/max/580/1*9qnW86KgOp-DfeYFUGMplQ.gif" alt=""></p>
<p>Of course you can arrange different conditions and answers depending on what the user has written to us (if ‚Äî else). You can arrange various scenario, query the API of external suppliers and return desired information depending on what you or your business need. I highly recommend you to read the <a href="https://developers.facebook.com/docs/messenger-platform/introduction">documentation</a> prepared by Facebook. They‚Äôve provided many types of response you can use to do it. It doesn‚Äôt have to be plain text. Persistent Menu, Buttons, Quick Replies these are just some of them, and all of them significantly improve the user experience.</p>
<h2 id="deploying-flask-app-to-heroku">Deploying Flask App to Heroku</h2>
<p>At first of course you have to create account on <a href="https://dashboard.heroku.com/">Heroku</a> if you don‚Äôt have yet. Create new project on it, install on your computer [Heroku CLI(<a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install)%5D">https://devcenter.heroku.com/articles/heroku-cli#download-and-install)]</a> &amp; <a href="https://git-scm.com/docs/gitcli">Git CLI</a> (we use git to upload our code). Open console inside your project create Procfile with code bellow:</p>
<pre><code>web: gunicorn app:app
</code></pre><p>The web command tells Heroku to start a web server for app using gunicorn. If your app file name is named app.py, you have to set the app name to be app as well. If you did it, in the next step in console run‚Ä¶</p>
<pre><code>$ pip install gunicorn
$ pip freeze &gt; requirements.txt
$ git init
$ git add .$ git commit -m &quot;First deploy&quot; 
$ heroku login
$ heroku git:remote -a &lt;YOUR-HEROKU-PROJECT-NAME&gt;
$ git push heroku master
</code></pre><p>‚Ä¶ your apps should working on Heroku now. Last thing which you have to do it‚Äôe edit Callback URL onto Facebook Developer account. Have fun! üêç Final code you can find on my <a href="https://github.com/radipawelec/messenger-py-chatbot-sample/blob/master/app.py">Github repo</a>.</p>
<p>This post originally was published also on Medium.</p>
]]></content>
		</item>
		
	</channel>
</rss>
